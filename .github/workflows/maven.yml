# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-deploy:

    runs-on: self-hosted

    outputs:
      app-status: ${{ steps.wait-for-app.outputs.app-status }}

    steps:
      - name: Stop previous instance (if exists)
        if: always()  # Ensure this step always runs, even if previous steps fail
        run: |
          if [ -f "pid.txt" ]; then
            PID=$(cat pid.txt)
            echo "Stopping previous instance of the application with PID $PID"
            kill $PID || true  # Use `|| true` to ignore errors if the process is already stopped
            rm pid.txt
          else
            echo "No previous instance found. Proceeding with deployment."
          fi

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Build with Maven
        run: mvn --file /home/ec2-user/actions-runner/_work/HotelRegistar/HotelRegistar/userService/pom.xml clean install -DskipTests

      - name: Run the application
        run: |
          nohup java -jar \
            -DAWS_ACCESS_KEY=${{ secrets.AWS_ACCESS_KEY }} \
            -DAWS_SECRET_KEY=${{ secrets.AWS_SECRET_KEY }} \
            -DDB_PASSWORD=${{ secrets.DB_PASSWORD }} \
            -DDB_USERNAME=${{ secrets.DB_USERNAME }} \
            -DJWT_SECRET=${{ secrets.JWT_SECRET }} \
            -DSSL_PASSWORD=${{ secrets.SSL_PASSWORD }} \
            /home/ec2-user/actions-runner/_work/HotelRegistar/HotelRegistar/userService/target/userService-0.0.1-SNAPSHOT.jar > /home/ec2-user/application.log 2>&1 &
          echo "PID=$!" >> /home/ec2-user/pid.txt  # Capture the PID of the background process

      - name: Wait for the application to start
        id: wait-for-app
        run: |
          retries=0
          max_retries=20  # Adjust the number of retries based on your application's startup time
          until curl -k --output /dev/null --silent --head --fail https://localhost:9000/actuator/health || [ $retries -eq $max_retries ]; do
            echo "Waiting for application to start..."
            retries=$((retries + 1))
            sleep 10s
          done
          if [ $retries -eq $max_retries ]; then
            echo "::set-output name=app-status::Application startup timed out."
            exit 1
          else
            echo "::set-output name=app-status::Application started successfully."
          fi

      # Optional: Check application status
      - name: Check application status
        run: curl -k -v http://localhost:9000/actuator/health  # Adjust the URL and port as needed

  checkout-job:
    runs-on: self-hosted
    needs: [ build-and-deploy ]
    if: ${{ needs.build-and-deploy.outputs.app-status == 'Application startup timed out.' }}

    steps:
      # Explicitly run this checkout job only if the application is down or timed out
      - name: Do something without checkout
        uses: actions/checkout@v4
