# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-deploy:
    runs-on: self-hosted

    steps:
      - uses: actions/checkout@v4

      - name: Stop previous instance (if exists)
        if: always()
        run: |
          if [ -f "/home/ec2-user/pid.txt" ]; then
            PID=$(cat /home/ec2-user/pid.txt)
            echo "Stopping previous instance of the application with PID $PID"
            kill $PID || true
            rm /home/ec2-user/pid.txt
          else
            echo "No previous instance found. Proceeding with deployment."
          fi

      - name: Build with Maven
        run: mvn --file /home/ec2-user/actions-runner/_work/HotelRegistar/HotelRegistar/userService/pom.xml clean install -DskipTests

      - name: Run the application
        run: |
          nohup java -jar \
            -DAWS_ACCESS_KEY=${{ secrets.AWS_ACCESS_KEY }} \
            -DAWS_SECRET_KEY=${{ secrets.AWS_SECRET_KEY }} \
            -DDB_PASSWORD=${{ secrets.DB_PASSWORD }} \
            -DDB_USERNAME=${{ secrets.DB_USERNAME }} \
            -DJWT_SECRET=${{ secrets.JWT_SECRET }} \
            -DSSL_PASSWORD=${{ secrets.SSL_PASSWORD }} \
            /home/ec2-user/actions-runner/_work/HotelRegistar/HotelRegistar/userService/target/userService-0.0.1-SNAPSHOT.jar > /home/ec2-user/application.log 2>&1 &
          echo $! > /home/ec2-user/pid.txt  # Capture the PID of the background process

      - name: Wait for the application to start
        id: wait-for-app
        run: |
          retries=0
          max_retries=20  # Adjust the number of retries based on your application's startup time
          until curl -k --output /dev/null --silent --head --fail https://localhost:9000/actuator/health || [ $retries -eq $max_retries ]; do
            echo "Waiting for application to start..."
            retries=$((retries + 1))
            sleep 10s
          done
          if [ $retries -eq $max_retries ]; then
            echo "Application startup timed out. Performing cleanup."
            if [ -f "/home/ec2-user/pid.txt" ]; then
              PID=$(cat /home/ec2-user/pid.txt)
              kill $PID || true
              rm /home/ec2-user/pid.txt
            fi
            echo "Application timed out, exiting the workflow."
            exit 1
          else
            echo "Application started successfully."
          fi
      - name: Prevent orphan processes
        if: always()
        run: |
          echo "Ensuring no orphan processes are left behind."
          if [ -f "/home/ec2-user/pid.txt" ]; then
            PID=$(cat /home/ec2-user/pid.txt)
            if ps -p $PID > /dev/null; then
              echo "Process $PID is still running, keeping it alive."
            else
              echo "Process $PID is not running, cleaning up."
              rm /home/ec2-user/pid.txt
            fi
          else
            echo "No pid.txt file found, nothing to clean up."
          fi